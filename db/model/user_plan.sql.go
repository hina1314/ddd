// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_plan.sql

package model

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const addUserPlan = `-- name: AddUserPlan :exec
INSERT INTO user_plan (
    order_id, room_item_id, phone, name, start_date, end_date, status,
    created_at, updated_at
)
VALUES (
           unnest($1::BIGINT[]),
           unnest($2::BIGINT[]),
           unnest($3::VARCHAR[]),
           unnest($4::VARCHAR[]),
           unnest($5::TIMESTAMP[]),
           unnest($6::TIMESTAMP[]),
           unnest($7::SMALLINT[]),
           unnest($8::TIMESTAMP[]),
           unnest($9::TIMESTAMP[])
       )
`

type AddUserPlanParams struct {
	OrderID    []int64     `json:"order_id"`
	RoomItemID []int64     `json:"room_item_id"`
	Phone      []string    `json:"phone"`
	Name       []string    `json:"name"`
	StartDate  []time.Time `json:"start_date"`
	EndDate    []time.Time `json:"end_date"`
	Status     []int16     `json:"status"`
	CreatedAt  []time.Time `json:"created_at"`
	UpdatedAt  []time.Time `json:"updated_at"`
}

func (q *Queries) AddUserPlan(ctx context.Context, arg AddUserPlanParams) error {
	_, err := q.db.ExecContext(ctx, addUserPlan,
		pq.Array(arg.OrderID),
		pq.Array(arg.RoomItemID),
		pq.Array(arg.Phone),
		pq.Array(arg.Name),
		pq.Array(arg.StartDate),
		pq.Array(arg.EndDate),
		pq.Array(arg.Status),
		pq.Array(arg.CreatedAt),
		pq.Array(arg.UpdatedAt),
	)
	return err
}

const checkBookingConflicts = `-- name: CheckBookingConflicts :one
SELECT COUNT(*) AS conflict_count
FROM user_plan
WHERE phone = $1
  AND status < 3 -- 0 待付款 1 待入住 2 入住中
  AND (
      -- Overlapping date ranges: new plan [start, end) conflicts with existing [start_date, end_date)
      (start_date < $2 AND end_date > $3)
  )
`

type CheckBookingConflictsParams struct {
	Phone     string    `json:"phone"`
	EndDate   time.Time `json:"end_date"`
	StartDate time.Time `json:"start_date"`
}

func (q *Queries) CheckBookingConflicts(ctx context.Context, arg CheckBookingConflictsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkBookingConflicts, arg.Phone, arg.EndDate, arg.StartDate)
	var conflict_count int64
	err := row.Scan(&conflict_count)
	return conflict_count, err
}
