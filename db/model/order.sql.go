// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: order.sql

package model

import (
	"context"
	"database/sql"

	"github.com/shopspring/decimal"
)

const addCart = `-- name: AddCart :one
INSERT INTO "cart" (user_id, sku_id, quantity, price)
VALUES ($1, $2, $3, $4)
    RETURNING id, user_id, sku_id, quantity, price, created_at, updated_at
`

type AddCartParams struct {
	UserID   int64           `json:"user_id"`
	SkuID    int64           `json:"sku_id"`
	Quantity int32           `json:"quantity"`
	Price    decimal.Decimal `json:"price"`
}

func (q *Queries) AddCart(ctx context.Context, arg AddCartParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, addCart,
		arg.UserID,
		arg.SkuID,
		arg.Quantity,
		arg.Price,
	)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SkuID,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO "order" (order_no, user_id, status, total_amount, paid_at)
VALUES ($1, $2, $3, $4, $5)
    RETURNING id, order_no, user_id, status, total_amount, paid_at, expire_at, created_at
`

type CreateOrderParams struct {
	OrderNo     string          `json:"order_no"`
	UserID      int32           `json:"user_id"`
	Status      int16           `json:"status"`
	TotalAmount decimal.Decimal `json:"total_amount"`
	PaidAt      sql.NullTime    `json:"paid_at"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.OrderNo,
		arg.UserID,
		arg.Status,
		arg.TotalAmount,
		arg.PaidAt,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.OrderNo,
		&i.UserID,
		&i.Status,
		&i.TotalAmount,
		&i.PaidAt,
		&i.ExpireAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrderByID = `-- name: DeleteOrderByID :exec
DELETE FROM "order"
WHERE id = $1
`

func (q *Queries) DeleteOrderByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrderByID, id)
	return err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, order_no, user_id, status, total_amount, paid_at, expire_at, created_at FROM "order"
WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.OrderNo,
		&i.UserID,
		&i.Status,
		&i.TotalAmount,
		&i.PaidAt,
		&i.ExpireAt,
		&i.CreatedAt,
	)
	return i, err
}

const getOrderByOrderNo = `-- name: GetOrderByOrderNo :one
SELECT id, order_no, user_id, status, total_amount, paid_at, expire_at, created_at FROM "order"
WHERE order_no = $1
`

func (q *Queries) GetOrderByOrderNo(ctx context.Context, orderNo string) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByOrderNo, orderNo)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.OrderNo,
		&i.UserID,
		&i.Status,
		&i.TotalAmount,
		&i.PaidAt,
		&i.ExpireAt,
		&i.CreatedAt,
	)
	return i, err
}

const listOrdersByUserID = `-- name: ListOrdersByUserID :many
SELECT id, order_no, user_id, status, total_amount, paid_at, expire_at, created_at FROM "order"
WHERE user_id = $1
ORDER BY created_at DESC
    LIMIT $2 OFFSET $3
`

type ListOrdersByUserIDParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrdersByUserID(ctx context.Context, arg ListOrdersByUserIDParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrdersByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.OrderNo,
			&i.UserID,
			&i.Status,
			&i.TotalAmount,
			&i.PaidAt,
			&i.ExpireAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatusByOrderNo = `-- name: UpdateOrderStatusByOrderNo :exec
UPDATE "order"
SET status = $1
WHERE order_no = $2
`

type UpdateOrderStatusByOrderNoParams struct {
	Status  int16  `json:"status"`
	OrderNo string `json:"order_no"`
}

func (q *Queries) UpdateOrderStatusByOrderNo(ctx context.Context, arg UpdateOrderStatusByOrderNoParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatusByOrderNo, arg.Status, arg.OrderNo)
	return err
}

const updatePaidAtAndStatusByOrderNo = `-- name: UpdatePaidAtAndStatusByOrderNo :exec
UPDATE "order"
SET paid_at = $1,
    status = $2
WHERE order_no = $3
`

type UpdatePaidAtAndStatusByOrderNoParams struct {
	PaidAt  sql.NullTime `json:"paid_at"`
	Status  int16        `json:"status"`
	OrderNo string       `json:"order_no"`
}

func (q *Queries) UpdatePaidAtAndStatusByOrderNo(ctx context.Context, arg UpdatePaidAtAndStatusByOrderNoParams) error {
	_, err := q.db.ExecContext(ctx, updatePaidAtAndStatusByOrderNo, arg.PaidAt, arg.Status, arg.OrderNo)
	return err
}
