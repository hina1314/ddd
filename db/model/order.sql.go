// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: order.sql

package model

import (
	"context"
	"time"

	"github.com/lib/pq"
	"github.com/shopspring/decimal"
)

const saveOrder = `-- name: SaveOrder :one
INSERT INTO "order" (
    order_sn, user_id, hotel_id, merchant_id, total_price, total_number,
    total_pay_ticket, status, created_at, expire_time
)
VALUES (
           $1::VARCHAR, $2::BIGINT, $3::BIGINT, $4::BIGINT,
           $5::DECIMAL, $6::INT, $7::INT, $8::SMALLINT,
           $9::TIMESTAMP, $10::TIMESTAMP
       )
RETURNING id, order_sn, user_id, hotel_id, merchant_id, total_price, total_number, total_pay_ticket, status, created_at, expire_time
`

type SaveOrderParams struct {
	OrderSn        string          `json:"order_sn"`
	UserID         int64           `json:"user_id"`
	HotelID        int64           `json:"hotel_id"`
	MerchantID     int64           `json:"merchant_id"`
	TotalPrice     decimal.Decimal `json:"total_price"`
	TotalNumber    int32           `json:"total_number"`
	TotalPayTicket int32           `json:"total_pay_ticket"`
	Status         int16           `json:"status"`
	CreatedAt      time.Time       `json:"created_at"`
	ExpireTime     time.Time       `json:"expire_time"`
}

func (q *Queries) SaveOrder(ctx context.Context, arg SaveOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, saveOrder,
		arg.OrderSn,
		arg.UserID,
		arg.HotelID,
		arg.MerchantID,
		arg.TotalPrice,
		arg.TotalNumber,
		arg.TotalPayTicket,
		arg.Status,
		arg.CreatedAt,
		arg.ExpireTime,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.OrderSn,
		&i.UserID,
		&i.HotelID,
		&i.MerchantID,
		&i.TotalPrice,
		&i.TotalNumber,
		&i.TotalPayTicket,
		&i.Status,
		&i.CreatedAt,
		&i.ExpireTime,
	)
	return i, err
}

const saveOrderRooms = `-- name: SaveOrderRooms :exec
INSERT INTO order_room (
     order_id, room_type_id, room_item_id, price, status, created_at
)
VALUES (
           unnest($1::BIGINT[]),
           unnest($2::BIGINT[]),
           unnest($3::BIGINT[]),
           unnest($4::DECIMAL[]),
           unnest($5::SMALLINT[]),
           unnest($6::TIMESTAMP[])
       )
`

type SaveOrderRoomsParams struct {
	OrderID    []int64           `json:"order_id"`
	RoomTypeID []int64           `json:"room_type_id"`
	RoomItemID []int64           `json:"room_item_id"`
	Price      []decimal.Decimal `json:"price"`
	Status     []int16           `json:"status"`
	CreatedAt  []time.Time       `json:"created_at"`
}

func (q *Queries) SaveOrderRooms(ctx context.Context, arg SaveOrderRoomsParams) error {
	_, err := q.db.ExecContext(ctx, saveOrderRooms,
		pq.Array(arg.OrderID),
		pq.Array(arg.RoomTypeID),
		pq.Array(arg.RoomItemID),
		pq.Array(arg.Price),
		pq.Array(arg.Status),
		pq.Array(arg.CreatedAt),
	)
	return err
}
