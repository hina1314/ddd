// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"database/sql"
	"study/db/model"
	"study/internal/api/handler"
	"study/internal/app"
	"study/internal/domain/user"
	"study/internal/infra/repository"
	"study/util"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func InitializeDependencies(cfg util.Config) (*Dependencies, error) {
	store, err := NewDB(cfg)
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewUserRepository(store)
	userAccountRepository := repository.NewUserAccountRepository(store)
	domainService := user.NewDomainService(userRepository, userAccountRepository)
	userService := app.NewUserService(domainService)
	userHandler := handler.NewUserHandler(userService)
	dependencies := &Dependencies{
		UserHandler: userHandler,
	}
	return dependencies, nil
}

// wire.go:

type Dependencies struct {
	UserHandler *handler.UserHandler
}

func NewDB(cfg util.Config) (model.Store, error) {
	db, err := sql.Open("postgres", cfg.DBSource)
	if err != nil {
		return nil, err
	}
	return model.NewStore(db), nil
}
